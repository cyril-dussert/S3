apiVersion: v1
kind: Template
metadata:
  annotations:
    description: A ready to use S3 Server
    iconClass: icon-nodejs
    tags: instant-app, nodejs, s3, kermit
  name: s3template
objects:
- apiVersion: v1
  kind: BuildConfig
  labels:
    application: ${APPLICATION_NAME}
  metadata:
    name: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    source:
      git:
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: centos7-s2i-nodejs:6
      type: Source
    triggers:
    - github:
        secret: ${WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${WEBHOOK_SECRET}
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: v1
  data:
    config.json: |
      {
          "port": 8080,
          "regions": {
              "ap-northeast-1": ["s3.ap-northeast-1.amazonaws.com"],
              "ap-southeast-1": ["s3.ap-southeast-1.amazonaws.com"],
              "ap-southeast-2": ["s3.ap-southeast-2.amazonaws.com"],
              "eu-central-1": ["s3.eu-central-1.amazonaws.com",
                               "s3.eu.central-1.amazonaws.com"],
              "eu-west-1": ["s3.eu-west-1.amazonaws.com"],
              "sa-east-1": ["s3.sa-east-1.amazonaws.com"],
              "us-east-1": ["s3.amazonaws.com",
                            "s3-external-1.amazonaws.com",
                            "s3.us-east-1.amazonaws.com"],
              "us-west-1": ["s3.us-west-1.amazonaws.com"],
              "us-west-2": ["s3-us-west-2.amazonaws.com"],
              "us-gov-west-1": ["s3-us-gov-west-1.amazonaws.com",
                                "s3-fips-us-gov-west-1.amazonaws.com"],
              "localregion": ["${LOCAL_ROUTE_URL}"],
              "specifiedregion": ["${ROUTE_URL}"],
              "test-region": ["s3.scality.test"]
          },
          "sproxyd": {
              "bootstrap": ["localhost:8181"]
          },
          "bucketd": {
              "bootstrap": ["s3.scality.test"]
          },
          "vaultd": {
              "host": "localhost",
              "port": 8500
          },
          "clusters": 10,
          "log": {
              "logLevel": "info",
              "dumpLevel": "error"
          },
          "healthChecks": {
              "allowFrom": ["127.0.0.1/8", "::1"]
          }
      }
  kind: ConfigMap
  metadata:
    name: ${APPLICATION_NAME}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    strategy:
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/container.s3.image.entrypoint: '["container-entrypoint","/bin/sh","-c","$STI_SCRIPTS_PATH/usage"]'
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
            -
              name: S3_CONFIG_FILE
              value: /config/config.json
          image: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              memory: 1500Mi
          volumeMounts:
            -
              name: config
              mountPath: /config
        volumes:
          -
            name: config
            configMap:
              name: ${APPLICATION_NAME}
              items:
              - key: config.json
                path: config.json
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: centos7-s2i-nodejs
  spec:
    tags:
    - annotations:
        openshift.io/imported-from: ryanj/centos7-s2i-nodejs:6
      from:
        kind: DockerImage
        name: ryanj/centos7-s2i-nodejs:6
      name: "6"
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    host: ${ROUTE_URL}
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
parameters:
- description: The name assigned to all of the objects defined in this template.
  displayName: APPLICATION_NAME
  name: APPLICATION_NAME
  required: true
  value: s3-server
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  value: https://github.com/orangekmt/S3.git
- description: The URL of your S3 Server.
  displayName: Route hostname (set your own)
  name: ROUTE_URL
  value: s3-server
- description: scheme : [APPLICATION_NAME].[PROJECT_NAME].svc.cluster.local
  displayName: Local url
  name: ROUTE_URL
  required: true
  value: [APPLICATION_NAME].[PROJECT_NAME].svc.cluster.local
- description: A secret string used to configure the Git webhook.
  displayName: Git Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: WEBHOOK_SECRET
message: "The webhook secret is ${WEBHOOK_SECRET}."